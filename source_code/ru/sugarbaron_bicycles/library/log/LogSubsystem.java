package ru.sugarbaron_bicycles.library.log;

import ru.sugarbaron_bicycles.library.exceptions.*;
import ru.sugarbaron_bicycles.library.time.*;



/**
 * this class describes log subsystem of application.
 * contains tools for creating different logs, getting links to existing
 * logs and other tools for journaling managing.
 * 
 * logs with equal file names are not permitted.
 * logs must have an unique names of files.
 * 
 * @author sugarbaron (sugarbaron1@mail.ru)
 */
public final class LogSubsystem{
  //maximum number of logs in system
  private static final int MAX_LOGS_QUANTITY   = 10;
  //array, which contains links to all logs in system
  private static LogUnit[] allLogs             = new LogUnit[MAX_LOGS_QUANTITY];
  //need to remember names of all log files in system
  private static String[]  logsFilesNames      = new String[MAX_LOGS_QUANTITY];
  //current quantity of logs in system
  private static int       currentLogsQuantity = 0;
  
  /**
   * declaration of empty constructor for preventing creation 
   * default-constructor. i must deny creation instances of this class.
   */
  private LogSubsystem(){}
  
  /**
   * creates log with specified log file name. (captain "obviousness" suggests!)
   * 
   * @param logFileName    name of log file 
   * @param clock          link to ClockUnit instance 
   *                       (for registering time of every record)
   *  
   * @throws NeedFixCode              if one of arguments is null,
   *                                  or if trying to create more than
   *                                    <code>MAX_LOGS_QUANTITY</code> logs in
   *                                    system,
   *                                  or if was detected wrong work of a
   *                                    program, because of errors in code.
   *                                    
   * @throws CriticalOperationFailed  in case of problems while working
   *                                    <code>LogUnit</code> constructor,
   *                                  or if some operation was failed, and this
   *                                    fact does not allow continue execution
   *                                    of a program.
   * 
   * @return link to created LogUnit instance
   */
  public synchronized static LogUnit createLog(String logFileName, ClockUnit clock)
  throws NeedFixCode, CriticalOperationFailed{
    //reference to log, which we will create here
    LogUnit newLog = null;
    
    //01.checking parameters validation
    if((null == logFileName)||(null == clock)){
      throw new NeedFixCode("[x]wrong parameters for #createLog() method");
    }
    
    //02.is it possible to create one more log?
    if(currentLogsQuantity >= MAX_LOGS_QUANTITY){
      throw new NeedFixCode("[x]can not create one more log");
    }
    
    //03.checking for already existing log with same log file name
    for(String name: logsFilesNames){
      if(logFileName.equals(name)){
        throw new NeedFixCode("[x]log with specified file name already exists");
      }
    }
    
    //04.creating new log
    newLog = new LogUnit(logFileName, clock);
    
    //if exception will not generated by #LogUnit constructor,
    //execution will reach this point of code.
    
    allLogs[currentLogsQuantity] = newLog;
    logsFilesNames[currentLogsQuantity] = logFileName;
    ++currentLogsQuantity;
    
    return newLog;
  }
  
  /**
   * get link to LogUnit, specified by log file name. 
   * 
   * @param logFileName    name of log file
   * @throws NeedFixCode  in case, when log with specified
   *                        file name is not exist, or
   *                      if was detected wrong work of a
   *                        programm, because of errors in code.
   * @return link to specified LogUnit instance
   */
   public synchronized static LogUnit getLog(String logFileName)
   throws NeedFixCode{
     for(int i=0; i<currentLogsQuantity; i++){
       if(logsFilesNames[i].equals(logFileName)){
         return allLogs[i];
       }
     }
     throw new NeedFixCode("[x]log with specified file name is not exist");
   }
}